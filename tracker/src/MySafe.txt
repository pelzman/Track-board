import axios from "axios";

const baseUrl = process.env.REACT_APP_BASE_URL;

export const apiGet = (path:string) => {
  const config = {
    headers: {
      Authorization: `Bearer ${localStorage.getItem("signature")}`
    },
  };

  return axios.get(`${baseUrl}${path}`, config);
};

export const apiPost = async (path:string, data:any) => {
  const config = {
    headers: {
      Authorization: `Bearer ${localStorage.getItem("signature")}`
    },
  };
  return await axios.post(`${baseUrl}${path}`, data, config);
};

export const FormDataPost = async (path:string, data:any) => {
  const config = {
    headers: {
      Authorization: `Bearer ${localStorage.getItem("signature")}`,
      "Content-Type": "multipart/form-data",
    },
  };
  return await axios.post(`${baseUrl}${path}`, data, config);
};

export const apiPut = (path:string, data:object) => {
  const config = {
    headers: {
      Authorization: `Bearer ${localStorage.getItem("signature")}`,
      "Content-Type": [ "application/json"]
    },
  };

  return axios.put(`${baseUrl}${path}`, data, config);
};

export const apiPatch = (path:string, data:object) => {
  const config = {
    headers: {
      Authorization: `Bearer ${localStorage.getItem("signature")}`,
      "Content-Type": ["application/json"]
    },
  };

  return axios.patch(`${baseUrl}${path}`, data, config);
};

export const formDataPatch = (path:string, data:object) => {
  const config = {
    headers: {
      Authorization: `Bearer ${localStorage.getItem("signature")}`,
      "Content-Type": "multipart/form-data"
    },
  };

  return axios.patch(`${baseUrl}${path}`, data, config);
};

export const apiDelete = (path:string) => {
  const config = {
    headers: {
      Authorization: `Bearer ${localStorage.getItem("signature")}`
    },
  };

  return axios.delete(`${baseUrl}${path}`, config);


};

FOR reducer

import { createSlice, PayloadAction } from '@reduxjs/toolkit';
 
export interface State {
  data: any[];
  user: any[];
  loading: boolean;
  error: string | null;
}

const initialState: State = {
  data: [],
  user: [], 
  loading: false,
  error: null,
};

const dataSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    fetchDataStart: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload;
      state.error = null;
    },
    fetchDataSuccess: (state, action: PayloadAction<any[]>) => {
      state.loading = false;
      state.data = action.payload;
    },
    fetchDataUser: (state, action: PayloadAction<any[]>) => {
      state.loading = false;
      state.user = action.payload;
    },

    fetchDataFailure: (state, action: PayloadAction<string>) => {
      state.loading = false;
      state.error = action.payload;
    },
  },
  
});

export const { fetchDataStart, fetchDataSuccess, fetchDataUser, fetchDataFailure } = dataSlice.actions;

export default dataSlice.reducer;


FOR THE actions
import { createAsyncThunk } from "@reduxjs/toolkit";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import { fetchDataFailure, fetchDataStart, fetchDataSuccess } from "./reducers";
import { apiPost } from "../utility/axios";

export interface LoginData{
    email:string;
    password:string;
    
}

export const loginUser = createAsyncThunk(
  "loginUser",
  async (formData: LoginData, { dispatch }) => {
    try {
      dispatch(fetchDataStart(true));
      const response = await apiPost("/user/login", formData);
      localStorage.setItem("userId", response.data.id);
      localStorage.setItem("signature", response.data.signature);
      localStorage.setItem("role", response.data.role);
      toast.success(response.data.message);
      dispatch(fetchDataSuccess(response.data));
      setTimeout(() => {
        window.location.href = "/dashboard";
      }, 2000);
    } catch (error:any) {
      toast.error(error.response.data.message);
      dispatch(fetchDataFailure(error.response.data.message));
    }
  }
);

export const registerUser = createAsyncThunk(
  "registerUser",
  async (formData: LoginData, { dispatch }) => {
    try {
      dispatch(fetchDataStart(true));
      const response = await apiPost("/user/signup", formData);
      toast.success(response.data.message);
      localStorage.setItem("signature", response.data.signature);
      localStorage.setItem("role", response.data.role);
      dispatch(fetchDataSuccess(response.data));
      setTimeout(() => {
        window.location.href = "/otp";
      }, 2000);
    } catch (error: any) {
      toast.error(error.response.data.Error);
      dispatch(fetchDataFailure(error.response.data.error));
    }
  }
);